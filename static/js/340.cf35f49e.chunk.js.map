{"version":3,"file":"static/js/340.cf35f49e.chunk.js","mappings":"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","sources":["components/PlayerCard.js","components/GameRoom.js","components/HistoryLog.js"],"sourcesContent":["// frontend/src/components/PlayerCard.js\nimport React, { memo } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction PlayerCard({ player, isSelf, isTurn }) {\n  const cardClass = `player-card ${isTurn ? 'active-turn' : ''} ${player.guessed ? 'guessed' : ''}`;\n\n  return (\n    <div className={cardClass}>\n      <div className=\"player-avatar\"></div>\n      <div className=\"player-name-container\">\n        <h3 className=\"player-name\">{player.name}</h3>\n        {player.characterSubmitted && !player.characterOnForehead && !player.guessed && (\n          <FontAwesomeIcon icon={faCheckCircle} className=\"ready-icon\" title=\"Персонаж загадан\" />\n        )}\n      </div>\n      \n      {!isSelf && player.characterOnForehead && (\n        <div className=\"character-display\">\n          <span className=\"character-name\">\n            {player.characterOnForehead}\n          </span>\n        </div>\n      )}\n\n      {player.guessed && <span className=\"guessed-badge\">Угадал!</span>}\n    </div>\n  );\n}\n\nexport default memo(PlayerCard);","// frontend/src/components/GameRoom.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PlayerCard from './PlayerCard';\nimport HistoryLog from './HistoryLog';\n\nfunction GameRoom({ game, playerName, socketId, onAskQuestion, onAnswerQuestion, onMakeGuess, onLeaveGame }) {\n  const [questionInput, setQuestionInput] = useState('');\n  const [guessInput, setGuessInput] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (game && game.status === 'waiting') {\n      navigate(`/lobby/${game.code}`);\n    }\n  }, [game, navigate]);\n\n  if (!game) {\n    return <div className=\"loading-screen\">Загрузка игровой комнаты...</div>;\n  }\n\n  const currentPlayer = game.players[game.currentPlayerIndex];\n  const isMyTurn = currentPlayer && currentPlayer.id === socketId;\n  const myPlayer = game.players.find(p => p.id === socketId);\n  const hasGuessed = myPlayer?.guessed;\n\n  const lastAction = game.actionLog.length > 0 ? game.actionLog[game.actionLog.length - 1] : null;\n  const isQuestionPending = lastAction && lastAction.type === 'question';\n\n  const handleAskQuestion = () => {\n    if (questionInput.trim() && isMyTurn && !hasGuessed) {\n      onAskQuestion(questionInput.trim());\n      setQuestionInput('');\n    }\n  };\n\n  const handleMakeGuess = () => {\n    if (guessInput.trim() && isMyTurn && !hasGuessed) {\n      onMakeGuess(guessInput.trim());\n      setGuessInput('');\n    }\n  };\n\n  const renderActionSection = () => {\n    if (game.status !== 'in-progress') return null;\n    if (hasGuessed) {\n      return <p className=\"submitted-message glass-panel\" style={{textAlign: 'center', padding: '20px'}}>Вы уже угадали! Ожидаем других.</p>;\n    }\n\n    if (isMyTurn) {\n      return (\n        <div>\n          <h3>Ваш ход! Угадайте, кто вы.</h3>\n          <p>Осталось вопросов: {game.maxQuestionsPerTurn - (myPlayer?.questionsAskedInTurn || 0)}</p>\n          <div className=\"input-group\">\n            <input type=\"text\" value={questionInput} onChange={(e) => setQuestionInput(e.target.value)} placeholder=\"Задайте вопрос (да/нет)\" disabled={myPlayer?.questionsAskedInTurn >= game.maxQuestionsPerTurn} maxLength=\"100\" />\n            <button onClick={handleAskQuestion} className=\"btn primary\" disabled={myPlayer?.questionsAskedInTurn >= game.maxQuestionsPerTurn}>Спросить</button>\n          </div>\n          <div className=\"input-group\">\n            <input type=\"text\" value={guessInput} onChange={(e) => setGuessInput(e.target.value)} placeholder=\"Попытка угадать персонажа\" maxLength=\"30\" />\n            <button onClick={handleMakeGuess} className=\"btn secondary\">Угадать!</button>\n          </div>\n        </div>\n      );\n    }\n\n    if (isQuestionPending) {\n        const characterOwner = game.players.find(p => p.characterSubmitted.toLowerCase() === currentPlayer.characterOnForehead.toLowerCase());\n        if (characterOwner && characterOwner.id === socketId) {\n            return (\n                <div>\n                  <h3>Ответьте на вопрос от {currentPlayer.name}:</h3>\n                  <p>\"{lastAction.text}\"</p>\n                  <div style={{ display: 'flex', gap: '10px', justifyContent: 'center' }}>\n                    <button onClick={() => onAnswerQuestion(true)} className=\"btn success\">Да</button>\n                    <button onClick={() => onAnswerQuestion(false)} className=\"btn danger\">Нет</button>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return <h3>Ожидайте своего хода...</h3>;\n  };\n\n  return (\n    <div className=\"glass-panel\">\n      <div className=\"room-header\">\n        <h1 className=\"room-title\">Игра: {game.code}</h1>\n        <p className=\"room-info\">\n          {game.status === 'in-progress' ? `Ход игрока: ${currentPlayer?.name}` : 'Игра завершена!'}\n        </p>\n      </div>\n\n      <div className=\"room-layout\">\n        <div className=\"main-content\">\n          <div className=\"players-display glass-panel\">\n            {game.players.map((player) => (\n              <PlayerCard\n                key={player.id}\n                player={player}\n                isSelf={player.id === socketId}\n                isTurn={player.id === currentPlayer?.id}\n              />\n            ))}\n          </div>\n\n          <div className=\"action-section glass-panel\">\n            {renderActionSection()}\n          </div>\n\n          {game.status === 'finished' && (\n            <div className=\"game-over-section glass-panel\" style={{textAlign: 'center'}}>\n              <h2>Игра завершена!</h2>\n              <p>Победитель: {game.players.find(p => p.guessed)?.name || 'Неизвестно'}</p>\n              <h3>Итоги:</h3>\n              <ul style={{listStyle: 'none', padding: 0}}>\n                {game.players.map(p => (\n                  <li key={p.id}>{p.name} был персонажем: <strong>{p.characterOnForehead}</strong></li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        <div className=\"history-panel glass-panel\">\n          <HistoryLog events={game.actionLog} />\n        </div>\n\n        <div className=\"exit-button-container\">\n          <button onClick={onLeaveGame} className=\"btn danger\">Выйти из игры</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GameRoom;","// frontend/src/components/HistoryLog.js\nimport React, { useEffect, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle, faCheck, faTimes, faBullseye, faSignInAlt, faSignOutAlt, faUserCheck, faGamepad } from '@fortawesome/free-solid-svg-icons';\n\nfunction HistoryLog({ events }) {\n  const eventsEndRef = useRef(null);\n\n  useEffect(() => {\n    eventsEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [events]);\n\n  const renderEvent = (event) => {\n    switch (event.type) {\n      case 'system':\n        return <><FontAwesomeIcon icon={faGamepad} /> <span>{event.text}</span></>;\n      case 'join':\n        return <><FontAwesomeIcon icon={faSignInAlt} /> <strong>{event.playerName}</strong> присоединился к игре.</>;\n      case 'leave':\n        return <><FontAwesomeIcon icon={faSignOutAlt} /> <strong>{event.playerName}</strong> покинул игру.</>;\n      case 'submit':\n        return <><FontAwesomeIcon icon={faUserCheck} /> <strong>{event.playerName}</strong> загадал персонажа.</>;\n      case 'question':\n        return <><FontAwesomeIcon icon={faQuestionCircle} /> <span><strong>{event.playerName}</strong> спросил: \"{event.text}\"</span></>;\n      case 'answer':\n        return <><FontAwesomeIcon icon={event.answer === 'Да' ? faCheck : faTimes} className={event.answer === 'Да' ? 'icon-yes' : 'icon-no'} /> <span><strong>{event.playerName}</strong> ответил: <strong>{event.answer}</strong></span></>;\n      case 'guess':\n        return <><FontAwesomeIcon icon={faBullseye} /> <span><strong>{event.playerName}</strong> угадывает: \"{event.text}\" - {event.isCorrect ? <strong className=\"correct-guess\">Верно!</strong> : 'Неверно.'}</span></>;\n      default:\n        return <span>Неизвестное действие.</span>;\n    }\n  };\n\n  return (\n    <div className=\"history-log-container\">\n      <h3>История игры</h3>\n      <div className=\"history-events\">\n        {events.map((event) => (\n          <div key={event.id} className={`history-event event-type-${event.type}`}>\n            {renderEvent(event)}\n          </div>\n        ))}\n        <div ref={eventsEndRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default HistoryLog;"],"names":["PlayerCard","_ref","player","isSelf","isTurn","cardClass","concat","guessed","_jsxs","className","children","_jsx","name","characterSubmitted","characterOnForehead","FontAwesomeIcon","icon","faCheckCircle","title","memo","_game$players$find","game","playerName","socketId","onAskQuestion","onAnswerQuestion","onMakeGuess","onLeaveGame","questionInput","setQuestionInput","useState","guessInput","setGuessInput","navigate","useNavigate","useEffect","status","code","currentPlayer","players","currentPlayerIndex","isMyTurn","id","myPlayer","find","p","hasGuessed","lastAction","actionLog","length","isQuestionPending","type","handleAskQuestion","trim","handleMakeGuess","map","renderActionSection","style","textAlign","padding","maxQuestionsPerTurn","questionsAskedInTurn","value","onChange","e","target","placeholder","disabled","maxLength","onClick","characterOwner","toLowerCase","text","display","gap","justifyContent","listStyle","HistoryLog","events","eventsEndRef","useRef","_eventsEndRef$current","current","scrollIntoView","behavior","renderEvent","event","_Fragment","faGamepad","faSignInAlt","faSignOutAlt","faUserCheck","faQuestionCircle","answer","faCheck","faTimes","faBullseye","isCorrect","ref"],"sourceRoot":""}